#!/bin/bash -ex
# {{ ansible_managed }}
#
# WARNING: Please read both the documentation and this script if you want to run it
# Authors:
# - Th√©ophile Helleboid
# - Paul Bonaud
# Description:
#   This helper tries to strictly follow the official documentation of PostgreSQL
#   from the pg_upgrade page: https://www.postgresql.org/docs/current/static/pgupgrade.html
# Usage:
#   WARNING: Please read both the documentation and this script if you want to run it
#   1. run this script on the postgresql server with a user able to use sudo as root and postgres users
#   2. edit this file and remove the "exit 1" line to really upgrade the cluster

# Output every line executed and stop on the first error
set -xe

# Enforce English messages
export LC_ALL=C

CLUSTER_PORT={{ postgres_port }}
CLUSTER_NAME={{ postgres_cluster_name }}

CLUSTER_OLD_VERSION={{ postgres_old_cluster_version }}
CLUSTER_NEW_VERSION={{ postgres_new_cluster_version }}

{% if postgres_pgbouncer_uri is defined and postgres_pgbouncer_uri %}
PGBOUNCER_URI={{ postgres_pgbouncer_uri }}
PGBOUNCER_DATABASES="{{ postgres_pgbouncer_databases | join(', ') }}"
{% endif %}

# Test your current host has access to all servers in SSH
sudo whoami && echo $(hostname)" OK"

{% if postgres_pgbouncer_uri is defined and postgres_pgbouncer_uri %}
# Test connection to pgbouncer is OK and see PGBOUNCER_DATABASE
POOLS=$(psql -P pager "$PGBOUNCER_URI" --command 'SHOW POOLS;')

for PGBOUNCER_DATABASE in $PGBOUNCER_DATABASES; do
  if [[ ! $POOLS =~ "$PGBOUNCER_DATABASE" ]]
  then
     echo "$PGBOUNCER_DATABASE not found!"
     exit 1
  fi
done
{% endif %}

# Test old cluster exists and version matches
sudo pg_ctlcluster $CLUSTER_OLD_VERSION $CLUSTER_NAME status
sudo -u postgres /bin/sh -c 'psql --tuples-only --no-align --port=$CLUSTER_PORT --command=\"SHOW SERVER_VERSION;\"'" | grep "^$CLUSTER_OLD_VERSION\.

# Test new version is installed
sudo /usr/lib/postgresql/$CLUSTER_NEW_VERSION/bin/pg_upgrade --version
# Test new cluster exists and is stopped
sudo pg_ctlcluster $CLUSTER_NEW_VERSION $CLUSTER_NAME status | grep 'no server running'
# Test the port of the new cluster is the same as the old one
grep 'port =' /etc/postgresql/$CLUSTER_NEW_VERSION/$CLUSTER_NAME/postgresql.conf | grep $CLUSTER_PORT

PG_UPGRADE_COMMAND='cd /var/lib/postgresql && sudo -u postgres /usr/lib/postgresql/'$CLUSTER_NEW_VERSION'/bin/pg_upgrade --link --jobs=8  \
   -b /usr/lib/postgresql/'$CLUSTER_OLD_VERSION'/bin                                           \
   -B /usr/lib/postgresql/'$CLUSTER_NEW_VERSION'/bin                                           \
   -d /var/lib/postgresql/'$CLUSTER_OLD_VERSION'/'$CLUSTER_NAME'                               \
   -D /var/lib/postgresql/'$CLUSTER_NEW_VERSION'/'$CLUSTER_NAME'                               \
   -o " -c config_file=/etc/postgresql/'$CLUSTER_OLD_VERSION'/'$CLUSTER_NAME'/postgresql.conf" \
   -O " -c config_file=/etc/postgresql/'$CLUSTER_NEW_VERSION'/'$CLUSTER_NAME'/postgresql.conf"'

# Test to upgrade the data
$PG_UPGRADE_COMMAND --check

# Force CHECKPOINT so the CHECKPOINT on shutdown will be faster
sudo -u postgres /bin/sh -c 'psql --port=$CLUSTER_PORT --command=\"CHECKPOINT;\"'

# Remove to perform the full upgrade
exit 1;

{% if postgres_pgbouncer_uri is defined and postgres_pgbouncer_uri %}
for PGBOUNCER_DATABASE in $PGBOUNCER_DATABASES; do
  # Pause the databases;
  psql "$PGBOUNCER_URI" --command "PAUSE $PGBOUNCER_DATABASE;"
done
{% endif %}

# Shut down the cluster. BEWARE: ensure no other databases are used in this cluster.
sudo pg_ctlcluster $CLUSTER_OLD_VERSION $CLUSTER_NAME stop -m fast

# Really upgrade the data
$PG_UPGRADE_COMMAND

# Start the cluster
sudo pg_ctlcluster $CLUSTER_NEW_VERSION $CLUSTER_NAME start

# Test new cluster is accepting connections
sudo -u postgres /bin/sh -c 'psql --port=$CLUSTER_PORT --command=\"SELECT NOW();\"'

{% if postgres_pgbouncer_uri is defined and postgres_pgbouncer_uri %}
for PGBOUNCER_DATABASE in $PGBOUNCER_DATABASES; do
  # Resume the connexions
  psql "$PGBOUNCER_URI" --command "RESUME $PGBOUNCER_DATABASE;"
done
{% endif %}

# Force generate minimal optimizer statistics rapidly
sudo -u postgres /usr/lib/postgresql/$CLUSTER_NEW_VERSION/bin/vacuumdb --port=$CLUSTER_PORT --jobs=8 --all --analyze-in-stages
